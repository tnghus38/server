// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_MYMINO_H_
#define FLATBUFFERS_GENERATED_TEST_MYMINO_H_

#include "flatbuffers/flatbuffers.h"

namespace MyMino {

struct Vec3;

struct start;

enum Mino {
  Mino_omino = 0,
  Mino_tmino = 1,
  Mino_zmino = 2,
  Mino_smino = 3,
  Mino_MIN = Mino_omino,
  Mino_MAX = Mino_smino
};

inline Mino (&EnumValuesMino())[4] {
  static Mino values[] = {
    Mino_omino,
    Mino_tmino,
    Mino_zmino,
    Mino_smino
  };
  return values;
}

inline const char **EnumNamesMino() {
  static const char *names[] = {
    "omino",
    "tmino",
    "zmino",
    "smino",
    nullptr
  };
  return names;
}

inline const char *EnumNameMino(Mino e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMino()[index];
}

enum state {
  state_NONE = 0,
  state_start = 1,
  state_MIN = state_NONE,
  state_MAX = state_start
};

inline state (&EnumValuesstate())[2] {
  static state values[] = {
    state_NONE,
    state_start
  };
  return values;
}

inline const char **EnumNamesstate() {
  static const char *names[] = {
    "NONE",
    "start",
    nullptr
  };
  return names;
}

inline const char *EnumNamestate(state e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesstate()[index];
}

template<typename T> struct stateTraits {
  static const state enum_value = state_NONE;
};

template<> struct stateTraits<start> {
  static const state enum_value = state_start;
};

bool Verifystate(flatbuffers::Verifier &verifier, const void *obj, state type);
bool VerifystateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct start FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_MI = 16,
    VT_TEST_TYPE = 18,
    VT_TEST = 20
  };
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 150);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 100);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  Mino mi() const {
    return static_cast<Mino>(GetField<int8_t>(VT_MI, 1));
  }
  state test_type() const {
    return static_cast<state>(GetField<uint8_t>(VT_TEST_TYPE, 0));
  }
  const void *test() const {
    return GetPointer<const void *>(VT_TEST);
  }
  template<typename T> const T *test_as() const;
  const start *test_as_start() const {
    return test_type() == state_start ? static_cast<const start *>(test()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<int16_t>(verifier, VT_MANA) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.Verify(inventory()) &&
           VerifyField<int8_t>(verifier, VT_MI) &&
           VerifyField<uint8_t>(verifier, VT_TEST_TYPE) &&
           VerifyOffset(verifier, VT_TEST) &&
           Verifystate(verifier, test(), test_type()) &&
           verifier.EndTable();
  }
};

template<> inline const start *start::test_as<start>() const {
  return test_as_start();
}

struct startBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(start::VT_POS, pos);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(start::VT_MANA, mana, 150);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(start::VT_HP, hp, 100);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(start::VT_NAME, name);
  }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(start::VT_INVENTORY, inventory);
  }
  void add_mi(Mino mi) {
    fbb_.AddElement<int8_t>(start::VT_MI, static_cast<int8_t>(mi), 1);
  }
  void add_test_type(state test_type) {
    fbb_.AddElement<uint8_t>(start::VT_TEST_TYPE, static_cast<uint8_t>(test_type), 0);
  }
  void add_test(flatbuffers::Offset<void> test) {
    fbb_.AddOffset(start::VT_TEST, test);
  }
  explicit startBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  startBuilder &operator=(const startBuilder &);
  flatbuffers::Offset<start> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<start>(end);
    return o;
  }
};

inline flatbuffers::Offset<start> Createstart(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    int16_t mana = 150,
    int16_t hp = 100,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory = 0,
    Mino mi = Mino_tmino,
    state test_type = state_NONE,
    flatbuffers::Offset<void> test = 0) {
  startBuilder builder_(_fbb);
  builder_.add_test(test);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_test_type(test_type);
  builder_.add_mi(mi);
  return builder_.Finish();
}

inline flatbuffers::Offset<start> CreatestartDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    int16_t mana = 150,
    int16_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    Mino mi = Mino_tmino,
    state test_type = state_NONE,
    flatbuffers::Offset<void> test = 0) {
  return MyMino::Createstart(
      _fbb,
      pos,
      mana,
      hp,
      name ? _fbb.CreateString(name) : 0,
      inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0,
      mi,
      test_type,
      test);
}

inline bool Verifystate(flatbuffers::Verifier &verifier, const void *obj, state type) {
  switch (type) {
    case state_NONE: {
      return true;
    }
    case state_start: {
      auto ptr = reinterpret_cast<const start *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifystateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!Verifystate(
        verifier,  values->Get(i), types->GetEnum<state>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyMino::start *Getstart(const void *buf) {
  return flatbuffers::GetRoot<MyMino::start>(buf);
}

inline bool VerifystartBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyMino::start>(nullptr);
}

inline void FinishstartBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyMino::start> root) {
  fbb.Finish(root);
}

}  // namespace MyMino

#endif  // FLATBUFFERS_GENERATED_TEST_MYMINO_H_
